AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Test website SSR with AWS Lambda
Parameters:
  # parametri provenienti da github actions, presi dalla vpc di default
  VpcId:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
  PublicSubnetOne:
    Description: Subnet ID
    Type: AWS::EC2::Subnet::Id
  PublicSubnetTwo:
    Description: Subnet ID
    Type: AWS::EC2::Subnet::Id

  LambdaBucket:
    Type: String
    Description: AWS bucket, where lambda function is stored
  LambdaUrl:
    Type: String
    Description: Path of lambda
  LambdaRoleName:
    Type: String
    Description: Name of the lambda role
  LambdaName:
    Type: String
    Description: Name of the lambda function
  LambdaRoleArnName:
    Type: String
    Description: ARN Name of the role attached with lambda function
  LambdaFunctionArnName:
    Type: String
    Description: Name of the lambda function ARN
  ApiGatewayName:
    Type: String
    Description: ApiGateway name

  # Database parameters
  DBName:
    Type: String
    Description: Database name
    Default: appdb
  DBUsername:
    Type: String
    Description: Database master username
    NoEcho: true
  DBPassword:
    Type: String
    Description: Database master password
    NoEcho: true
  DBPort:
    Type: Number
    Description: Database port
    Default: 5432
  DBMinCapacity:
    Type: Number
    Description: Minimum database capacity (ACU)
    Default: 0.5
    MinValue: 0.5
  DBMaxCapacity:
    Type: Number
    Description: Maximum database capacity (ACU)
    Default: 2.0
    MinValue: 0.5

Resources:
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for PostgreSQL database
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: !Ref "DBPort"
          ToPort: !Ref "DBPort"
          CidrIp: 0.0.0.0/0 # ⚠️ Accessibile da internet per debug
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: !Ref "DBPort"
          ToPort: !Ref "DBPort"
          DestinationSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: !Ref "DBPort"
          ToPort: !Ref "DBPort"
          CidrIp: 0.0.0.0/0 # ⚠️
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db-sg

  # Security Group for Lambda
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0 # Permette tutto il traffico in uscita
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lambda-sg

  VPCEndpointForLambda:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.lambda"
      VpcId: !Ref VpcId
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroupIds:
        - !GetAtt LambdaSecurityGroup.GroupId

  # DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for PostgreSQL database
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db-subnet-group

  # DB Cluster Parameter Group
  DBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Aurora PostgreSQL Cluster Parameter Group
      Family: aurora-postgresql14
      Parameters:
        shared_preload_libraries: auto_explain,pg_stat_statements,pg_hint_plan
        log_statement: all
        log_min_duration_statement: "1000"

  # Aurora PostgreSQL Serverless Cluster
  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineVersion: "14.6"
      DatabaseName: !Ref DBName
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !GetAtt DBSecurityGroup.GroupId
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      Port: !Ref DBPort
      BackupRetentionPeriod: 7
      ServerlessV2ScalingConfiguration:
        MinCapacity: !Ref DBMinCapacity
        MaxCapacity: !Ref DBMaxCapacity
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db-cluster

  # Aurora DB Instance
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      PubliclyAccessible: true
      DBParameterGroupName: default.aurora-postgresql14
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db-instance

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref "LambdaRoleName"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonKinesisFullAccess"
      Path: "/"
      Policies:
        - PolicyName: LambdaVPCAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaExecutionRole
      - DBInstance
    Properties:
      FunctionName: !Ref "LambdaName"
      Description: LambdaFunction for test website
      Runtime: "nodejs18.x"
      Code:
        S3Bucket: !Ref "LambdaBucket"
        S3Key: !Ref "LambdaUrl"
      Handler: .output/server/index.handler
      MemorySize: 256
      Timeout: 100
      Role: !GetAtt "LambdaExecutionRole.Arn"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PublicSubnetOne
          - !Ref PublicSubnetTwo
      Environment:
        Variables:
          DB_HOSTNAME: !GetAtt DBCluster.Endpoint.Address
          DB_PORT: !Ref DBPort
          DB_NAME: !Ref DBName
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          NODE_ENV: production

  LambdaFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE # Oppure AWS_IAM se hai bisogno di autenticazione
      InvokeMode: BUFFERED # Opzioni: BUFFERED o RESPONSE_STREAM
      TargetFunctionArn: !GetAtt LambdaFunction.Arn
      Cors:
        AllowCredentials: true
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
        AllowOrigins:
          - "*"
        MaxAge: 86400 # 24 ore

  LambdaFunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName: !Ref LambdaFunction
      Principal: "*"
      FunctionUrlAuthType: NONE # Deve corrispondere all'AuthType sopra

Outputs:
  LambdaRoleARN:
    Description: Role for Lambda execution.
    Value:
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Export:
      Name: !Ref "LambdaRoleArnName"

  DatabaseEndpoint:
    Description: The connection endpoint for the RDS instance
    Value: !GetAtt DBInstance.Endpoint.Address

  LambdaFunctionUrl:
    Description: "URL pubblico per la Lambda function"
    Value: !GetAtt LambdaFunctionUrl.FunctionUrl
