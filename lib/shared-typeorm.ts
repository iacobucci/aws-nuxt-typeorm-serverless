import "reflect-metadata";

import * as typeorm from "typeorm";

export type { ColumnOptions, IndexOptions, JoinColumnOptions, JoinTableOptions, RelationOptions, EntityOptions, ValueTransformer, FindOperatorType, FindOptionsOrder, FindOptionsRelations, FindOptionsSelect, FindManyOptions, FindOneOptions, FindOptionsWhere, FindTreeOptions, JoinOptions, OrderByCondition, Logger, LoggerOptions, RemoveOptions, SaveOptions, TableCheckOptions, TableColumnOptions, TableExclusionOptions, TableForeignKeyOptions, TableIndexOptions, TableOptions, TableUniqueOptions, ViewOptions, DatabaseType, ReplicationMode, DataSourceOptions, Driver, ConnectionOptions, WhereExpressionBuilder, WhereExpression, QueryRunner, MigrationInterface, NamingStrategyInterface, InsertEvent, LoadEvent, UpdateEvent, RemoveEvent, SoftRemoveEvent, RecoverEvent, TransactionCommitEvent, TransactionRollbackEvent, TransactionStartEvent, EntitySubscriberInterface, EntitySchemaColumnOptions, EntitySchemaIndexOptions, EntitySchemaRelationOptions, ColumnType } from "typeorm";

// modulo di utilit√† per l'importazione delle classi e decoratori di TypeORM utilizzabili sia dal client che dal server
// viene sfruttato il tree-shaking, quindi nel client i collegamenti ai dati sensibili del database verranno interrotti
// nel server, invece, verranno utilizzati i collegamenti completi

export let SharedColumn                                 = typeorm.Column || function () { return function () { return; }; };
export let SharedCreateDateColumn                       = typeorm.CreateDateColumn || function () { return function () { return; }; };
export let SharedDeleteDateColumn                       = typeorm.DeleteDateColumn || function () { return function () { return; }; };
export let SharedPrimaryGeneratedColumn                 = typeorm.PrimaryGeneratedColumn || function () { return function () { return; }; };
export let SharedPrimaryColumn                          = typeorm.PrimaryColumn || function () { return function () { return; }; };
export let SharedUpdateDateColumn                       = typeorm.UpdateDateColumn || function () { return function () { return; }; };
export let SharedVersionColumn                          = typeorm.VersionColumn || function () { return function () { return; }; };
export let SharedVirtualColumn                          = typeorm.VirtualColumn || function () { return function () { return; }; };
export let SharedViewColumn                             = typeorm.ViewColumn || function () { return function () { return; }; };
export let SharedObjectIdColumn                         = typeorm.ObjectIdColumn || function () { return function () { return; }; };
export let SharedAfterInsert                            = typeorm.AfterInsert || function () { return function () { return; }; };
export let SharedAfterLoad                              = typeorm.AfterLoad || function () { return function () { return; }; };
export let SharedAfterRemove                            = typeorm.AfterRemove || function () { return function () { return; }; };
export let SharedAfterSoftRemove                        = typeorm.AfterSoftRemove || function () { return function () { return; }; };
export let SharedAfterRecover                           = typeorm.AfterRecover || function () { return function () { return; }; };
export let SharedAfterUpdate                            = typeorm.AfterUpdate || function () { return function () { return; }; };
export let SharedBeforeInsert                           = typeorm.BeforeInsert || function () { return function () { return; }; };
export let SharedBeforeRemove                           = typeorm.BeforeRemove || function () { return function () { return; }; };
export let SharedBeforeSoftRemove                       = typeorm.BeforeSoftRemove || function () { return function () { return; }; };
export let SharedBeforeRecover                          = typeorm.BeforeRecover || function () { return function () { return; }; };
export let SharedBeforeUpdate                           = typeorm.BeforeUpdate || function () { return function () { return; }; };
export let SharedEventSubscriber                        = typeorm.EventSubscriber || function () { return function () { return; }; };
export let SharedJoinColumn                             = typeorm.JoinColumn || function () { return function () { return; }; };
export let SharedJoinTable                              = typeorm.JoinTable || function () { return function () { return; }; };
export let SharedManyToMany                             = typeorm.ManyToMany || function () { return function () { return; }; };
export let SharedManyToOne                              = typeorm.ManyToOne || function () { return function () { return; }; };
export let SharedOneToMany                              = typeorm.OneToMany || function () { return function () { return; }; };
export let SharedOneToOne                               = typeorm.OneToOne || function () { return function () { return; }; };
export let SharedRelationCount                          = typeorm.RelationCount || function () { return function () { return; }; };
export let SharedRelationId                             = typeorm.RelationId || function () { return function () { return; }; };
export let SharedEntity                                 = typeorm.Entity || function () { return function () { return; }; };
export let SharedChildEntity                            = typeorm.ChildEntity || function () { return function () { return; }; };
export let SharedTableInheritance                       = typeorm.TableInheritance || function () { return function () { return; }; };
export let SharedViewEntity                             = typeorm.ViewEntity || function () { return function () { return; }; };
export let SharedTreeLevelColumn                        = typeorm.TreeLevelColumn || function () { return function () { return; }; };
export let SharedTreeParent                             = typeorm.TreeParent || function () { return function () { return; }; };
export let SharedTreeChildren                           = typeorm.TreeChildren || function () { return function () { return; }; };
export let SharedTree                                   = typeorm.Tree || function () { return function () { return; }; };
export let SharedIndex                                  = typeorm.Index || function () { return function () { return; }; };
export let SharedUnique                                 = typeorm.Unique || function () { return function () { return; }; };
export let SharedCheck                                  = typeorm.Check || function () { return function () { return; }; };
export let SharedExclusion                              = typeorm.Exclusion || function () { return function () { return; }; };
export let SharedGenerated                              = typeorm.Generated || function () { return function () { return; }; };
export let SharedEntityRepository                       = typeorm.EntityRepository || function () { return function () { return; }; };
export let SharedAnd                                    = typeorm.And || function () { return function () { return; }; };
export let SharedOr                                     = typeorm.Or || function () { return function () { return; }; };
export let SharedAny                                    = typeorm.Any || function () { return function () { return; }; };
export let SharedArrayContainedBy                       = typeorm.ArrayContainedBy || function () { return function () { return; }; };
export let SharedArrayContains                          = typeorm.ArrayContains || function () { return function () { return; }; };
export let SharedArrayOverlap                           = typeorm.ArrayOverlap || function () { return function () { return; }; };
export let SharedBetween                                = typeorm.Between || function () { return function () { return; }; };
export let SharedEqual                                  = typeorm.Equal || function () { return function () { return; }; };
export let SharedIn                                     = typeorm.In || function () { return function () { return; }; };
export let SharedIsNull                                 = typeorm.IsNull || function () { return function () { return; }; };
export let SharedLessThan                               = typeorm.LessThan || function () { return function () { return; }; };
export let SharedLessThanOrEqual                        = typeorm.LessThanOrEqual || function () { return function () { return; }; };
export let SharedILike                                  = typeorm.ILike || function () { return function () { return; }; };
export let SharedLike                                   = typeorm.Like || function () { return function () { return; }; };
export let SharedMoreThan                               = typeorm.MoreThan || function () { return function () { return; }; };
export let SharedMoreThanOrEqual                        = typeorm.MoreThanOrEqual || function () { return function () { return; }; };
export let SharedNot                                    = typeorm.Not || function () { return function () { return; }; };
export let SharedRaw                                    = typeorm.Raw || function () { return function () { return; }; };
export let SharedJsonContains                           = typeorm.JsonContains || function () { return function () { return; }; };

export let SharedEqualOperator                          = typeorm.EqualOperator || class {};
export let SharedFindOperator                           = typeorm.FindOperator || class {};
export let SharedFindOptionsUtils                       = typeorm.FindOptionsUtils || class {};
export let SharedAbstractLogger                         = typeorm.AbstractLogger || class {};
export let SharedAdvancedConsoleLogger                  = typeorm.AdvancedConsoleLogger || class {};
export let SharedSimpleConsoleLogger                    = typeorm.SimpleConsoleLogger || class {};
export let SharedFileLogger                             = typeorm.FileLogger || class {};
export let SharedEntityMetadata                         = typeorm.EntityMetadata || class {};
export let SharedEntityManager                          = typeorm.EntityManager || class {};
export let SharedAbstractRepository                     = typeorm.AbstractRepository || class {};
export let SharedRepository                             = typeorm.Repository || class {};
export let SharedBaseEntity                             = typeorm.BaseEntity || class {};
export let SharedTreeRepository                         = typeorm.TreeRepository || class {};
export let SharedMongoRepository                        = typeorm.MongoRepository || class {};
export let SharedTableCheck                             = typeorm.TableCheck || class {};
export let SharedTableColumn                            = typeorm.TableColumn || class {};
export let SharedTableExclusion                         = typeorm.TableExclusion || class {};
export let SharedTableForeignKey                        = typeorm.TableForeignKey || class {};
export let SharedTableIndex                             = typeorm.TableIndex || class {};
export let SharedTableUnique                            = typeorm.TableUnique || class {};
export let SharedTable                                  = typeorm.Table || class {};
export let SharedView                                   = typeorm.View || class {};
export let SharedMssqlParameter                         = typeorm.MssqlParameter || class {};
export let SharedConnectionOptionsReader                = typeorm.ConnectionOptionsReader || class {};
export let SharedDataSource                             = typeorm.DataSource || class {};
export let SharedConnection                             = typeorm.Connection || class {};
export let SharedConnectionManager                      = typeorm.ConnectionManager || class {};
export let SharedQueryBuilder                           = typeorm.QueryBuilder || class {};
export let SharedSelectQueryBuilder                     = typeorm.SelectQueryBuilder || class {};
export let SharedDeleteQueryBuilder                     = typeorm.DeleteQueryBuilder || class {};
export let SharedInsertQueryBuilder                     = typeorm.InsertQueryBuilder || class {};
export let SharedUpdateQueryBuilder                     = typeorm.UpdateQueryBuilder || class {};
export let SharedRelationQueryBuilder                   = typeorm.RelationQueryBuilder || class {};
export let SharedBrackets                               = typeorm.Brackets || class {};
export let SharedNotBrackets                            = typeorm.NotBrackets || class {};
export let SharedInsertResult                           = typeorm.InsertResult || class {};
export let SharedUpdateResult                           = typeorm.UpdateResult || class {};
export let SharedDeleteResult                           = typeorm.DeleteResult || class {};
export let SharedQueryResult                            = typeorm.QueryResult || class {};
export let SharedMongoEntityManager                     = typeorm.MongoEntityManager || class {};
export let SharedMigration                              = typeorm.Migration || class {};
export let SharedMigrationExecutor                      = typeorm.MigrationExecutor || class {};
export let SharedDefaultNamingStrategy                  = typeorm.DefaultNamingStrategy || class {};
export let SharedLegacyOracleNamingStrategy             = typeorm.LegacyOracleNamingStrategy || class {};
export let SharedEntitySchema                           = typeorm.EntitySchema || class {};
export let SharedEntitySchemaEmbeddedColumnOptions      = typeorm.EntitySchemaEmbeddedColumnOptions || class {};
export let SharedEntitySchemaOptions                    = typeorm.EntitySchemaOptions || class {};
export let SharedInstanceChecker                        = typeorm.InstanceChecker || class {};
export let SharedTreeRepositoryUtils                    = typeorm.TreeRepositoryUtils || class {};

